{"version":3,"sources":["routes/inBuiltApps/phishing_simulator/Email.js","routes/inBuiltApps/phishing_simulator/index.js"],"names":["Email","state","id","props","sender","receiver","content","handleSubmit","e","preventDefault","swal","title","text","icon","buttons","then","decision","console","log","all_answers","get_selected_answer","selection","push","strokeColor","style","marginBottom","percent","this","progress_circle_percent","overlay","onClick","user_answer","Item","key","width","className","selected_answer","DownOutlined","type","shape","SaveFilled","marginTop","alt","src","Component","Phishing_simulator","handleChange","selectedPage","setState","emails","selected_email","handleUserAnswer","item","qid","user_selection","parseInt","eventKey","user_answers","chosen_answer","message_content","message","success","progress_circle_size","Object","keys","length","emailProps","marginLeft","onChange","simple","defaultCurrent","defaultPageSize","total","PureComponent"],"mappings":"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","file":"static/js/4.fc65a8df.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Menu, Dropdown, Button, Row, Col, Progress } from 'antd';\r\nimport { DownOutlined, SaveFilled } from '@ant-design/icons';\r\nimport swal from 'sweetalert'\r\n\r\nclass Email extends Component {\r\n    state = {\r\n        id: this.props.id,\r\n        sender: this.props.sender,\r\n        receiver: this.props.receiver,\r\n        content: this.props.content,\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        swal({\r\n            title: \"Confirmation\",\r\n            text: \"Are you sure you want to submit your answers?\",\r\n            icon: \"info\",\r\n            buttons: true,\r\n        })\r\n            .then((decision) => {\r\n                if (decision) {\r\n                    console.log(this.props.all_answers)\r\n                    swal(\"Your answers have been saved, please check the results!\", {\r\n                        icon: \"success\",\r\n                    })\r\n\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    get_selected_answer = (selection) => {\r\n        if (selection === 1)\r\n            return \"Phishing Email\"\r\n        else if (selection === 2)\r\n            return \"Real Email\"\r\n        else if (selection === 3)\r\n            return \"I don't know!\"\r\n        else\r\n            return \"Choose the email type\"\r\n    }\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col > {/** style={{ style={{ marginLeft: 50 }} */}\r\n                    <Row push={2}>\r\n                        <Progress strokeColor=\"#cb42f5\" style={{ marginBottom: 15 }} percent={this.props.progress_circle_percent} /> {/** style={{ marginLeft: 50, marginTop: -65 }}  */}\r\n                        <Dropdown overlay={\r\n                            <Menu onClick={this.props.user_answer} >\r\n                                <Menu.Item id={this.props.id} key=\"1\" text={\"Phishing Email\"} ><span>Phishing Email</span></Menu.Item>\r\n                                <Menu.Item id={this.props.id} key=\"2\" text={\"Real Email\"} ><span>Real Email</span></Menu.Item>\r\n                                <Menu.Item id={this.props.id} key=\"3\" text={\"I don't know!\"} ><span>I don't know!</span></Menu.Item>\r\n                            </Menu>\r\n                        }>\r\n                            <Button\r\n                                style={{ width: 200 }}\r\n                                className=\"ant-dropdown-link\"\r\n                                onClick={e => e.preventDefault()}> {this.get_selected_answer(this.props.selected_answer)}\r\n                                <DownOutlined />\r\n                            </Button>\r\n                        </Dropdown>\r\n                        {\r\n                            this.props.progress_circle_percent === 100 ? (\r\n                                <Button type=\"danger\" shape=\"round\" onClick={this.handleSubmit}> <SaveFilled />Submit</Button>\r\n                            ) : ('')\r\n                        }\r\n                    </Row>\r\n                    <Row style={{ marginTop: 10 }}>\r\n                        <img alt=\"Error404_image_not_found\" width={550} src={this.props.content} />\r\n                    </Row>\r\n                </Col>\r\n\r\n\r\n            </Row>\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Email","import React, { PureComponent } from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n// import IntlMessages from \"../../../util/IntlMessages\";\r\nimport { Card, Col, Row, message } from 'antd';\r\n// import Basic from '../../components/feedback/Progress/Basic' //default calsses which are exported as default shouldn't be imported between {}\r\nimport { Pagination } from 'antd';\r\nimport Email from './Email'\r\n\r\n\r\nclass Phishing_simulator extends PureComponent {\r\n\r\n  handleChange = (selectedPage) => {\r\n    this.setState({\r\n      ...this.state.emails,\r\n      selected_email: this.state.emails[selectedPage - 1]\r\n    })\r\n\r\n  }\r\n\r\n  handleUserAnswer = ({ item }) => {\r\n    let selection = {\r\n      qid: item.props.id,\r\n      user_selection: parseInt(item.props.eventKey)\r\n    }\r\n    let user_answers = this.state.user_answers\r\n    user_answers = { ...user_answers, [selection.qid]: selection }\r\n    this.setState({ ...this.state, user_answers, chosen_answer: selection.user_selection })\r\n\r\n    // let tempEmail = this.state.emails.filter(email => email.id === selection.qid)\r\n    // tempEmail.user_selection = selection.user_selection\r\n    // let allEmails = this.state.emails\r\n    // allEmails.push({ ...tempEmail })\r\n    // this.setState({\r\n    //   emails: { ...this.state.emails, allEmails}\r\n    // })\r\n\r\n    let message_content = `You have selected: ${item.props.text}`\r\n    message.success(message_content, 2)\r\n\r\n    //let objIndex = user_answers.findIndex(e => e.qid === selection.qid)\r\n\r\n    // if (objIndex === -1) {\r\n    //   //user_answers.push(selection) //NOT THE GOOD APPROACH\r\n    //    user_answers = {...user_answers, [selection.id]: selection}\r\n    //    this.setState({ ...this.state, user_answers })\r\n    //  } else {\r\n    //   user_answers[objIndex] = { ...user_answers[objIndex], user_selection: selection.user_selection }\r\n    // }\r\n\r\n    // this.setState({ ...this.state, user_answers })\r\n\r\n  }\r\n\r\n\r\n  state = {\r\n    emails: [\r\n      { id: 1, sender: 'asdij@aifjw.com', receiver: 'kkkower@gmail.com', content: 'https://www.phishingbox.com/phishing-test/img/phishing-test-q1.jpg' },\r\n      { id: 2, sender: 'asdoe@asdeg.com', receiver: 'kkkower@gmail.com', content: 'https://www.phishingbox.com/phishing-test/img/phishing-test-q2.jpg' },\r\n      { id: 3, sender: 'asdoe@asdeg.com', receiver: 'kkkower@gmail.com', content: 'https://www.phishingbox.com/phishing-test/img/phishing-test-q3.jpg' },\r\n      { id: 4, sender: 'asdoe@asdeg.com', receiver: 'kkkower@gmail.com', content: 'https://www.phishingbox.com/phishing-test/img/phishing-test-q4.jpg' },\r\n      { id: 5, sender: 'asdoe@asdeg.com', receiver: 'kkkower@gmail.com', content: 'https://www.phishingbox.com/phishing-test/img/phishing-test-q5.jpg' },\r\n      { id: 6, sender: 'asdoe@asdeg.com', receiver: 'kkkower@gmail.com', content: 'https://www.phishingbox.com/phishing-test/img/phishing-test-q6.jpg' },\r\n      { id: 7, sender: 'asdoe@asdeg.com', receiver: 'kkkower@gmail.com', content: 'https://www.phishingbox.com/phishing-test/img/phishing-test-q7.jpg' },\r\n      { id: 8, sender: 'asdoe@asdeg.com', receiver: 'kkkower@gmail.com', content: 'https://www.phishingbox.com/phishing-test/img/phishing-test-q8.jpg' },\r\n      { id: 9, sender: 'asdoe@asdeg.com', receiver: 'kkkower@gmail.com', content: 'https://www.phishingbox.com/phishing-test/img/phishing-test-q9.jpg' },\r\n      { id: 10, sender: 'asdoe@asdeg.com', receiver: 'kkkower@gmail.com', content: 'https://www.phishingbox.com/phishing-test/img/phishing-test-q10.jpg' },\r\n    ],\r\n    selected_email: {},\r\n    chosen_answer: '',\r\n    user_answers: {}\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.setState({ selected_email: this.state.emails[0] })\r\n  }\r\n  // componentWillUpdate() {\r\n  //   console.log(this.state.user_answers)\r\n  // }\r\n  componentDidUpdate() {\r\n    let selected_email = this.state.selected_email\r\n    let user_selection = this.state.user_answers[selected_email.id] != null ? this.state.user_answers[selected_email.id].user_selection : 'Not_Answered'\r\n    this.setState({ ...this.state, chosen_answer: user_selection })\r\n\r\n  }\r\n\r\n  render() {\r\n    let chosen_answer = parseInt(this.state.chosen_answer)\r\n    let progress_circle_size = (Object.keys(this.state.user_answers).length / this.state.emails.length) * 100\r\n    let emailProps = {\r\n      id: this.state.selected_email.id,\r\n      sender: this.state.selected_email.sender,\r\n      receiver: this.state.selected_email.receiver,\r\n      content: this.state.selected_email.content,\r\n    }\r\n\r\n    return (\r\n      <Card title=\"Phishing Simulator\" className=\"gx-card\">  {/**  style={{marginLeft: 230, width: 750}}  */}\r\n        <Row style={{ marginLeft: 55 }}> {/** style={{ marginLeft: 55 }}  */}\r\n          <Col>\r\n            <Pagination onChange={this.handleChange} simple defaultCurrent={1} defaultPageSize={1} total={this.state.emails.length} />\r\n            <Email user_answer={this.handleUserAnswer} all_answers={this.state.user_answers} progress_circle_percent={progress_circle_size} selected_answer={chosen_answer} id={emailProps.id} sender={emailProps.sender} receiver={emailProps.receiver} content={emailProps.content} />\r\n          </Col>\r\n        </Row>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Phishing_simulator;\r\n"],"sourceRoot":""}